using System;

namespace BACnetDataTypes.Primitive
{
    /**
 * ASHRAE Standard 135-2012 Clause 20.2.13 Encoding of a Time Value p. 631<br>
 * <br>
 * The encoding of a time value shall be primitive, with four contents octets.<br>
 * Unless otherwise specified (e.g., UTC time), a time value generated by a device<br>
 * shall be a local time.<br>
 * <br>
 * Time values shall be encoded in the contents octets as four binary integers.<br> 
 * The first contents octet shall represent the hour, in the 24-hour system<br>
 * (1 P.M. = D'13'); the second octet shall represent the minute of the hour;<br>
 * the third octet shall represent the second of the minute; and the fourth<br>
 * octet shall represent the fractional part of the second in hundredths of a<br> 
 * second. A value of X'FF' = D'255' in any of the four octets shall indicate<br>
 * that the corresponding value is unspecified and shall be considered a<br>
 * wildcard when matching times. If all four octets = X'FF', the corresponding<br> 
 * time may be interpreted as "any" or "don't care."<br>
 * <br>
 * Neither an unspecified time nor a time pattern shall be used in time values<br> 
 * that convey actual time, such as those presented by the Local_Time property<br> 
 * of the Device object or in a TimeSynchronization-Request.<br>
 * <br>
 * Example: Application-tagged specific time value<br>
 * ASN.1 = Time<br>
 * Value = 17:35:45.17 (= 5:35:45.17 P.M.)<br>
 * Application Tag = Time (Tag Number = 11)<br> 
 * Encoded Tag = X'B4'<br>
 * Encoded Data = X'11232D11'<br>
 */

    public class Time : Primitive
    {
        public static readonly byte TYPE_ID = 11;


        public Time(int hour, int minute, int second, int hundredth)
        {
            Hour = hour;
            Minute = minute;
            Second = second;
            Hundredth = hundredth;
        }

        public Time() : this(DateTime.Now)
        {
        }


        public Time(DateTime now)
        {
            Hour = now.Hour;
            Minute = now.Minute;
            Second = now.Second;
            Hundredth = now.Millisecond/10;
        }

        public bool IsHourUnspecified => Hour == 255;

        public int Hour { get; }

        public bool IsMinuteUnspecified => Minute == 255;

        public int Minute { get; }

        public bool IsSecondUnspecified => Second == 255;

        public int Second { get; }

        public bool IsHundredthUnspecified => Hundredth == 255;

        public int Hundredth { get; }

        /**
         * @param that
         *            The time with which to compare this
         * @return true if this < that.
         */

        public bool before(Time that)
        {
            if (!IsHourUnspecified && !that.IsHourUnspecified)
            {
                if (Hour < that.Hour)
                    return true;
                if (Hour > that.Hour)
                    return false;
            }

            if (!IsMinuteUnspecified && !that.IsMinuteUnspecified)
            {
                if (Minute < that.Minute)
                    return true;
                if (Minute > that.Minute)
                    return false;
            }

            if (!IsSecondUnspecified && !that.IsSecondUnspecified)
            {
                if (Second < that.Second)
                    return true;
                if (Second > that.Second)
                    return false;
            }

            if (IsHundredthUnspecified || that.IsHundredthUnspecified)
                return false;

            return Hundredth < that.Hundredth;
        }

        /**
     * @param that
     *            The time with which to compare this
     * @return true if this >= that
     */

        public bool after(Time that)
        {
            if (!IsHourUnspecified && !that.IsHourUnspecified)
            {
                if (Hour > that.Hour)
                    return true;
                if (Hour < that.Hour)
                    return false;
            }

            if (!IsMinuteUnspecified && !that.IsMinuteUnspecified)
            {
                if (Minute > that.Minute)
                    return true;
                if (Minute < that.Minute)
                    return false;
            }

            if (!IsSecondUnspecified && !that.IsSecondUnspecified)
            {
                if (Second > that.Second)
                    return true;
                if (Second < that.Second)
                    return false;
            }

            if (IsHundredthUnspecified || that.IsHundredthUnspecified)
                return true;

            return Hundredth >= that.Hundredth;
        }

        //
        // Reading and writing
        //
        public Time(ByteStream queue)
        {
            readTag(queue);
            Hour = queue.popU1B();
            Minute = queue.popU1B();
            Second = queue.popU1B();
            Hundredth = queue.popU1B();
        }


        protected override void WriteImpl(ByteStream queue)
        {
            queue.WriteByte((byte)Hour);
            queue.WriteByte((byte)Minute);
            queue.WriteByte((byte)Second);
            queue.WriteByte((byte)Hundredth);
        }


        protected override long Length { get; } = 4;

        protected override byte TypeId => TYPE_ID;

        public override string ToString() => Hour + ":" + Minute + ":" + Second + "." + Hundredth;
    }
}
