using System;
using Microsoft.SPOT;

namespace BACnetNetduino.DataTypes.Primitive
{
    /**
 * ASHRAE Standard 135-2012 Clause 20.2.13 Encoding of a Time Value p. 631<br>
 * <br>
 * The encoding of a time value shall be primitive, with four contents octets.<br>
 * Unless otherwise specified (e.g., UTC time), a time value generated by a device<br>
 * shall be a local time.<br>
 * <br>
 * Time values shall be encoded in the contents octets as four binary integers.<br> 
 * The first contents octet shall represent the hour, in the 24-hour system<br>
 * (1 P.M. = D'13'); the second octet shall represent the minute of the hour;<br>
 * the third octet shall represent the second of the minute; and the fourth<br>
 * octet shall represent the fractional part of the second in hundredths of a<br> 
 * second. A value of X'FF' = D'255' in any of the four octets shall indicate<br>
 * that the corresponding value is unspecified and shall be considered a<br>
 * wildcard when matching times. If all four octets = X'FF', the corresponding<br> 
 * time may be interpreted as "any" or "don't care."<br>
 * <br>
 * Neither an unspecified time nor a time pattern shall be used in time values<br> 
 * that convey actual time, such as those presented by the Local_Time property<br> 
 * of the Device object or in a TimeSynchronization-Request.<br>
 * <br>
 * Example: Application-tagged specific time value<br>
 * ASN.1 = Time<br>
 * Value = 17:35:45.17 (= 5:35:45.17 P.M.)<br>
 * Application Tag = Time (Tag Number = 11)<br> 
 * Encoded Tag = X'B4'<br>
 * Encoded Data = X'11232D11'<br>
 */
    class Time : Primitive
    {
    public static readonly byte TYPE_ID = 11;

    private readonly int hour;
    private readonly int minute;
    private readonly int second;
    private readonly int hundredth;


    public Time(int hour, int minute, int second, int hundredth)
    {
        this.hour = hour;
        this.minute = minute;
        this.second = second;
        this.hundredth = hundredth;
    }

    public Time() : this(DateTime.Now) { }


    public Time(DateTime now)
    {
        this.hour = now.Hour;
        this.minute = now.Minute;
        this.second = now.Second;
        this.hundredth = now.Millisecond / 10;
    }

    public bool isHourUnspecified()
    {
        return hour == 255;
    }

    public int getHour()
    {
        return hour;
    }

    public bool isMinuteUnspecified()
    {
        return minute == 255;
    }

    public int getMinute()
    {
        return minute;
    }

    public bool isSecondUnspecified()
    {
        return second == 255;
    }

    public int getSecond()
    {
        return second;
    }

    public bool isHundredthUnspecified()
    {
        return hundredth == 255;
    }

    public int getHundredth()
    {
        return hundredth;
    }

    /**
     * @param that
     *            The time with which to compare this
     * @return true if this < that.
     */
    public bool before(Time that)
    {
        if (!this.isHourUnspecified() && !that.isHourUnspecified())
        {
            if (this.hour < that.hour)
                return true;
            if (this.hour > that.hour)
                return false;
        }

        if (!this.isMinuteUnspecified() && !that.isMinuteUnspecified())
        {
            if (this.minute < that.minute)
                return true;
            if (this.minute > that.minute)
                return false;
        }

        if (!this.isSecondUnspecified() && !that.isSecondUnspecified())
        {
            if (this.second < that.second)
                return true;
            if (this.second > that.second)
                return false;
        }

        if (this.isHundredthUnspecified() || that.isHundredthUnspecified())
            return false;

        return this.hundredth < that.hundredth;
    }

    /**
     * @param that
     *            The time with which to compare this
     * @return true if this >= that
     */
    public bool after(Time that)
    {
        if (!this.isHourUnspecified() && !that.isHourUnspecified())
        {
            if (this.hour > that.hour)
                return true;
            if (this.hour < that.hour)
                return false;
        }

        if (!this.isMinuteUnspecified() && !that.isMinuteUnspecified())
        {
            if (this.minute > that.minute)
                return true;
            if (this.minute < that.minute)
                return false;
        }

        if (!this.isSecondUnspecified() && !that.isSecondUnspecified())
        {
            if (this.second > that.second)
                return true;
            if (this.second < that.second)
                return false;
        }

        if (this.isHundredthUnspecified() || that.isHundredthUnspecified())
            return true;

        return this.hundredth >= that.hundredth;
    }

    //
    // Reading and writing
    //
    public Time(ByteStream queue)
    {
        readTag(queue);
        hour = queue.popU1B();
        minute = queue.popU1B();
        second = queue.popU1B();
        hundredth = queue.popU1B();
    }

    
    /*public override void writeImpl(ByteStream queue)
    {
        queue.push((byte)hour);
        queue.push((byte)minute);
        queue.push((byte)second);
        queue.push((byte)hundredth);
    }*/

    
    protected override long getLength()
    {
        return 4;
    }

    
    protected override byte getTypeId()
    {
        return TYPE_ID;
    }

   
    public override string ToString()
    {
        return hour + ":" + minute + ":" + second + "."
                + hundredth;

    }
}
}
